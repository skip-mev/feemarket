// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feemarket/feemarket/v1/mock.proto

package mock

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MockFeeMarket is a message that contains the information about a mock fee
// market implementation.
//
// NOTE: This is an example of a mock fee market. It is not used in production.
type MockFeeMarket struct {
	TestData string `protobuf:"bytes,1,opt,name=test_data,json=testData,proto3" json:"test_data,omitempty"`
}

func (m *MockFeeMarket) Reset()         { *m = MockFeeMarket{} }
func (m *MockFeeMarket) String() string { return proto.CompactTextString(m) }
func (*MockFeeMarket) ProtoMessage()    {}
func (*MockFeeMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b7e37c7950103c0, []int{0}
}
func (m *MockFeeMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MockFeeMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MockFeeMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MockFeeMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockFeeMarket.Merge(m, src)
}
func (m *MockFeeMarket) XXX_Size() int {
	return m.Size()
}
func (m *MockFeeMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_MockFeeMarket.DiscardUnknown(m)
}

var xxx_messageInfo_MockFeeMarket proto.InternalMessageInfo

func (m *MockFeeMarket) GetTestData() string {
	if m != nil {
		return m.TestData
	}
	return ""
}

func init() {
	proto.RegisterType((*MockFeeMarket)(nil), "feemarket.feemarket.v1.MockFeeMarket")
}

func init() { proto.RegisterFile("feemarket/feemarket/v1/mock.proto", fileDescriptor_6b7e37c7950103c0) }

var fileDescriptor_6b7e37c7950103c0 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0x4b, 0x4d, 0xcd,
	0x4d, 0x2c, 0xca, 0x4e, 0x2d, 0xd1, 0x47, 0xb0, 0xca, 0x0c, 0xf5, 0x73, 0xf3, 0x93, 0xb3, 0xf5,
	0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xc4, 0xe0, 0x12, 0x7a, 0x08, 0x56, 0x99, 0xa1, 0x94, 0x64,
	0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71, 0x3c, 0x58, 0x95, 0x3e, 0x84, 0x03, 0xd1, 0xa2, 0x94, 0xc0,
	0xc5, 0xeb, 0x9b, 0x9f, 0x9c, 0xed, 0x96, 0x9a, 0xea, 0x0b, 0x56, 0x2e, 0x24, 0xcd, 0xc5, 0x59,
	0x92, 0x5a, 0x5c, 0x12, 0x9f, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0xc4,
	0x01, 0x12, 0x70, 0x49, 0x2c, 0x49, 0xb4, 0x32, 0x3a, 0xb5, 0x45, 0x57, 0x0f, 0xbb, 0x25, 0x7a,
	0x70, 0x23, 0x3c, 0x73, 0x0b, 0x72, 0x52, 0x73, 0x53, 0xf3, 0x4a, 0x12, 0x4b, 0x32, 0xf3, 0xf3,
	0x9c, 0x02, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09,
	0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x2c, 0x3d, 0xb3,
	0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x38, 0x3b, 0xb3, 0x40, 0x37, 0x37, 0xb5,
	0x0c, 0xc9, 0x6f, 0x15, 0x48, 0xec, 0x82, 0x9c, 0xd2, 0xf4, 0xcc, 0xbc, 0x62, 0xb0, 0x67, 0x93,
	0xd8, 0xc0, 0x4e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x52, 0x48, 0x0c, 0x12, 0x01,
	0x00, 0x00,
}

func (m *MockFeeMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MockFeeMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MockFeeMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TestData) > 0 {
		i -= len(m.TestData)
		copy(dAtA[i:], m.TestData)
		i = encodeVarintMock(dAtA, i, uint64(len(m.TestData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMock(dAtA []byte, offset int, v uint64) int {
	offset -= sovMock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MockFeeMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TestData)
	if l > 0 {
		n += 1 + l + sovMock(uint64(l))
	}
	return n
}

func sovMock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMock(x uint64) (n int) {
	return sovMock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MockFeeMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MockFeeMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MockFeeMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMock = fmt.Errorf("proto: unexpected end of group")
)
