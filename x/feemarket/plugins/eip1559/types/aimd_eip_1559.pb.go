// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feemarket/eip1559/v1/aimd_eip_1559.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AIMDEIP1559 is the contains the Additive Increase Multiplicative Decrease
// (AIMD) EIP-1559 fee market parameters and state.
type AIMDEIP1559 struct {
	// Params are the parameters of the AIMD fee market.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// State is the current state of the AIMD fee market.
	State State `protobuf:"bytes,2,opt,name=state,proto3" json:"state"`
}

func (m *AIMDEIP1559) Reset()         { *m = AIMDEIP1559{} }
func (m *AIMDEIP1559) String() string { return proto.CompactTextString(m) }
func (*AIMDEIP1559) ProtoMessage()    {}
func (*AIMDEIP1559) Descriptor() ([]byte, []int) {
	return fileDescriptor_92732f277215cba1, []int{0}
}
func (m *AIMDEIP1559) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AIMDEIP1559) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AIMDEIP1559.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AIMDEIP1559) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AIMDEIP1559.Merge(m, src)
}
func (m *AIMDEIP1559) XXX_Size() int {
	return m.Size()
}
func (m *AIMDEIP1559) XXX_DiscardUnknown() {
	xxx_messageInfo_AIMDEIP1559.DiscardUnknown(m)
}

var xxx_messageInfo_AIMDEIP1559 proto.InternalMessageInfo

func (m *AIMDEIP1559) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *AIMDEIP1559) GetState() State {
	if m != nil {
		return m.State
	}
	return State{}
}

// State contains the current state of the AIMD fee market.
type State struct {
	// CurrentBaseFee is the current base fee. This is denominated in the fee
	// per gas unit.
	CurrentBaseFee cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=current_base_fee,json=currentBaseFee,proto3,customtype=cosmossdk.io/math.Int" json:"current_base_fee"`
	// BlockUtilizationWindow contains a list of the last blocks' utilization
	// values. This is used to calculate the next base fee.
	BlockUtilizationWindow []uint64 `protobuf:"varint,2,rep,packed,name=block_utilization_window,json=blockUtilizationWindow,proto3" json:"block_utilization_window,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_92732f277215cba1, []int{1}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetBlockUtilizationWindow() []uint64 {
	if m != nil {
		return m.BlockUtilizationWindow
	}
	return nil
}

func init() {
	proto.RegisterType((*AIMDEIP1559)(nil), "feemarket.eip1559.v1.AIMDEIP1559")
	proto.RegisterType((*State)(nil), "feemarket.eip1559.v1.State")
}

func init() {
	proto.RegisterFile("feemarket/eip1559/v1/aimd_eip_1559.proto", fileDescriptor_92732f277215cba1)
}

var fileDescriptor_92732f277215cba1 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x93, 0x75, 0x77, 0xc1, 0x59, 0x10, 0x09, 0xab, 0xc4, 0x55, 0xb2, 0xeb, 0x9e, 0x0a,
	0xd2, 0x09, 0x59, 0x59, 0xd4, 0xbd, 0x88, 0x41, 0x17, 0x72, 0x28, 0x94, 0x4a, 0x11, 0xbd, 0x84,
	0x49, 0xfa, 0x9a, 0x0e, 0xc9, 0x64, 0x86, 0xcc, 0x24, 0x55, 0x3f, 0x85, 0x47, 0x3f, 0x48, 0xf1,
	0x33, 0x14, 0x4f, 0xc5, 0x93, 0x78, 0x28, 0xd2, 0x7e, 0x91, 0x25, 0x93, 0xd0, 0xf6, 0xd0, 0xdb,
	0x7b, 0xef, 0xff, 0xfb, 0xbf, 0xf7, 0x78, 0x0f, 0x75, 0xc6, 0x00, 0x8c, 0x14, 0x29, 0x28, 0x17,
	0xa8, 0xf0, 0xae, 0xaf, 0xdf, 0xb8, 0x95, 0xe7, 0x12, 0xca, 0x46, 0x21, 0x50, 0x11, 0xd6, 0x05,
	0x2c, 0x0a, 0xae, 0xb8, 0x75, 0xba, 0x21, 0x71, 0x4b, 0xe2, 0xca, 0x3b, 0x7b, 0x12, 0x73, 0xc9,
	0xb8, 0x0c, 0x35, 0xe3, 0x36, 0x49, 0x63, 0x38, 0x3b, 0x4d, 0x78, 0xc2, 0x9b, 0x7a, 0x1d, 0xb5,
	0xd5, 0xe7, 0x7b, 0x07, 0x0a, 0x52, 0x10, 0xd6, 0x1a, 0x2f, 0x7f, 0x99, 0xe8, 0xe4, 0x5d, 0xd0,
	0x7b, 0xff, 0x21, 0xe8, 0xd7, 0xba, 0x75, 0x83, 0x8e, 0x1b, 0xdd, 0x36, 0x2f, 0xcc, 0xce, 0xc9,
	0xd5, 0x33, 0xbc, 0x6f, 0x15, 0xdc, 0xd7, 0x8c, 0x7f, 0x38, 0x5f, 0x9e, 0x1b, 0x83, 0xd6, 0x61,
	0xbd, 0x42, 0x47, 0x52, 0x11, 0x05, 0xf6, 0x81, 0xb6, 0x3e, 0xdd, 0x6f, 0xfd, 0x58, 0x23, 0xad,
	0xb3, 0xe1, 0x6f, 0xae, 0x7e, 0xcf, 0xba, 0x3b, 0xf0, 0x36, 0xaa, 0x3c, 0x7c, 0x0b, 0xd0, 0xd3,
	0x49, 0xc0, 0x44, 0x06, 0x0c, 0x72, 0x45, 0x14, 0xe5, 0xf9, 0xe5, 0x4f, 0x13, 0x1d, 0xe9, 0x56,
	0xd6, 0x10, 0x3d, 0x8c, 0xcb, 0xa2, 0x80, 0x5c, 0x85, 0x11, 0x91, 0x10, 0x8e, 0x01, 0xf4, 0xf2,
	0xf7, 0xfd, 0x17, 0xf5, 0x90, 0x7f, 0xcb, 0xf3, 0x47, 0xcd, 0xad, 0xe4, 0x28, 0xc5, 0x94, 0xbb,
	0x8c, 0xa8, 0x09, 0x0e, 0x72, 0xf5, 0x67, 0xd6, 0x45, 0xed, 0x11, 0x83, 0x5c, 0x0d, 0x1e, 0xb4,
	0x4d, 0x7c, 0x22, 0xe1, 0x16, 0xc0, 0x7a, 0x8d, 0xec, 0x28, 0xe3, 0x71, 0x1a, 0x96, 0x8a, 0x66,
	0xf4, 0xbb, 0x9e, 0x1a, 0x4e, 0x69, 0x3e, 0xe2, 0x53, 0xfb, 0xe0, 0xe2, 0x5e, 0xe7, 0x70, 0xf0,
	0x58, 0xeb, 0xc3, 0xad, 0xfc, 0x49, 0xab, 0xfe, 0xe7, 0xf9, 0xca, 0x31, 0x17, 0x2b, 0xc7, 0xfc,
	0xbf, 0x72, 0xcc, 0x1f, 0x6b, 0xc7, 0x58, 0xac, 0x1d, 0xe3, 0xef, 0xda, 0x31, 0xbe, 0xbc, 0x4d,
	0xa8, 0x9a, 0x94, 0x11, 0x8e, 0x39, 0x73, 0x65, 0x4a, 0x45, 0x97, 0x41, 0xe5, 0x6e, 0x9f, 0xf4,
	0x75, 0x27, 0x16, 0x59, 0x99, 0xd0, 0x5c, 0x6e, 0x1e, 0xa7, 0xbe, 0x09, 0x90, 0xd1, 0xb1, 0xfe,
	0xda, 0xcb, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x8b, 0x36, 0x16, 0x4b, 0x02, 0x00, 0x00,
}

func (m *AIMDEIP1559) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AIMDEIP1559) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AIMDEIP1559) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAimdEip_1559(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAimdEip_1559(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockUtilizationWindow) > 0 {
		dAtA4 := make([]byte, len(m.BlockUtilizationWindow)*10)
		var j3 int
		for _, num := range m.BlockUtilizationWindow {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintAimdEip_1559(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.CurrentBaseFee.Size()
		i -= size
		if _, err := m.CurrentBaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAimdEip_1559(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAimdEip_1559(dAtA []byte, offset int, v uint64) int {
	offset -= sovAimdEip_1559(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AIMDEIP1559) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovAimdEip_1559(uint64(l))
	l = m.State.Size()
	n += 1 + l + sovAimdEip_1559(uint64(l))
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentBaseFee.Size()
	n += 1 + l + sovAimdEip_1559(uint64(l))
	if len(m.BlockUtilizationWindow) > 0 {
		l = 0
		for _, e := range m.BlockUtilizationWindow {
			l += sovAimdEip_1559(uint64(e))
		}
		n += 1 + sovAimdEip_1559(uint64(l)) + l
	}
	return n
}

func sovAimdEip_1559(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAimdEip_1559(x uint64) (n int) {
	return sovAimdEip_1559(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AIMDEIP1559) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAimdEip_1559
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AIMDEIP1559: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AIMDEIP1559: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAimdEip_1559
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAimdEip_1559
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAimdEip_1559(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAimdEip_1559
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAimdEip_1559
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentBaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAimdEip_1559
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockUtilizationWindow = append(m.BlockUtilizationWindow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAimdEip_1559
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAimdEip_1559
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAimdEip_1559
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockUtilizationWindow) == 0 {
					m.BlockUtilizationWindow = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAimdEip_1559
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockUtilizationWindow = append(m.BlockUtilizationWindow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUtilizationWindow", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAimdEip_1559(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAimdEip_1559
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAimdEip_1559(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAimdEip_1559
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAimdEip_1559
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAimdEip_1559
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAimdEip_1559
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAimdEip_1559
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAimdEip_1559
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAimdEip_1559        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAimdEip_1559          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAimdEip_1559 = fmt.Errorf("proto: unexpected end of group")
)
