// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feemarket/feemarket/v1/panic.proto

package mocks

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PanicMarket is a message that contains the information about a panic
// fee market used ONLY for testing
//
// NOTE: Most operations of this fee market will panic for testing.
type PanicMarket struct {
	// State1 represents arbitrary data stored in the implementation.
	StateA string `protobuf:"bytes,1,opt,name=stateA,proto3" json:"stateA,omitempty"`
	// State2 represents arbitrary data stored in the implementation.
	StateB string `protobuf:"bytes,2,opt,name=stateB,proto3" json:"stateB,omitempty"`
}

func (m *PanicMarket) Reset()         { *m = PanicMarket{} }
func (m *PanicMarket) String() string { return proto.CompactTextString(m) }
func (*PanicMarket) ProtoMessage()    {}
func (*PanicMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_497e7cde817162d1, []int{0}
}
func (m *PanicMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PanicMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PanicMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PanicMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanicMarket.Merge(m, src)
}
func (m *PanicMarket) XXX_Size() int {
	return m.Size()
}
func (m *PanicMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_PanicMarket.DiscardUnknown(m)
}

var xxx_messageInfo_PanicMarket proto.InternalMessageInfo

func (m *PanicMarket) GetStateA() string {
	if m != nil {
		return m.StateA
	}
	return ""
}

func (m *PanicMarket) GetStateB() string {
	if m != nil {
		return m.StateB
	}
	return ""
}

func init() {
	proto.RegisterType((*PanicMarket)(nil), "feemarket.feemarket.v1.PanicMarket")
}

func init() {
	proto.RegisterFile("feemarket/feemarket/v1/panic.proto", fileDescriptor_497e7cde817162d1)
}

var fileDescriptor_497e7cde817162d1 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x4b, 0x4d, 0xcd,
	0x4d, 0x2c, 0xca, 0x4e, 0x2d, 0xd1, 0x47, 0xb0, 0xca, 0x0c, 0xf5, 0x0b, 0x12, 0xf3, 0x32, 0x93,
	0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xc4, 0xe0, 0x32, 0x7a, 0x08, 0x56, 0x99, 0xa1, 0x94,
	0x64, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71, 0x3c, 0x58, 0x95, 0x3e, 0x84, 0x03, 0xd1, 0xa2, 0x54,
	0xc8, 0xc5, 0x1d, 0x00, 0x32, 0xc1, 0x17, 0xac, 0x58, 0x48, 0x8c, 0x8b, 0xad, 0xb8, 0x24, 0xb1,
	0x24, 0xd5, 0x51, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xca, 0x83, 0x8b, 0x3b, 0x49, 0x30,
	0x21, 0x89, 0x3b, 0x59, 0x19, 0x9d, 0xda, 0xa2, 0xab, 0x87, 0xdd, 0x56, 0x3d, 0xb7, 0xd4, 0x54,
	0x88, 0xa9, 0x9e, 0xb9, 0x05, 0x39, 0xa9, 0xb9, 0xa9, 0x79, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79,
	0x4e, 0x81, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84,
	0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x9e, 0x9e, 0x59,
	0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x5f, 0x9c, 0x9d, 0x59, 0xa0, 0x9b, 0x9b, 0x5a,
	0x86, 0xe4, 0xdb, 0x0a, 0x24, 0x76, 0x41, 0x4e, 0x69, 0x7a, 0x66, 0x5e, 0xb1, 0x7e, 0x6e, 0x7e,
	0x72, 0x76, 0x71, 0x12, 0x1b, 0xd8, 0x33, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0xdd,
	0xfc, 0x86, 0x25, 0x01, 0x00, 0x00,
}

func (m *PanicMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PanicMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PanicMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateB) > 0 {
		i -= len(m.StateB)
		copy(dAtA[i:], m.StateB)
		i = encodeVarintPanic(dAtA, i, uint64(len(m.StateB)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StateA) > 0 {
		i -= len(m.StateA)
		copy(dAtA[i:], m.StateA)
		i = encodeVarintPanic(dAtA, i, uint64(len(m.StateA)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPanic(dAtA []byte, offset int, v uint64) int {
	offset -= sovPanic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PanicMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateA)
	if l > 0 {
		n += 1 + l + sovPanic(uint64(l))
	}
	l = len(m.StateB)
	if l > 0 {
		n += 1 + l + sovPanic(uint64(l))
	}
	return n
}

func sovPanic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPanic(x uint64) (n int) {
	return sovPanic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PanicMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPanic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PanicMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PanicMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPanic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPanic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPanic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPanic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPanic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPanic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPanic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPanic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPanic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPanic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPanic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPanic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPanic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPanic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPanic = fmt.Errorf("proto: unexpected end of group")
)
