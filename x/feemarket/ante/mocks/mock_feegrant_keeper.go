// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/cosmos/gogoproto/proto"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// FeeGrantKeeper is an autogenerated mock type for the FeeGrantKeeper type
type FeeGrantKeeper struct {
	mock.Mock
}

// UseGrantedFees provides a mock function with given fields: ctx, granter, grantee, fee, msgs
func (_m *FeeGrantKeeper) UseGrantedFees(ctx context.Context, granter types.AccAddress, grantee types.AccAddress, fee types.Coins, msgs []proto.Message) error {
	ret := _m.Called(ctx, granter, grantee, fee, msgs)

	if len(ret) == 0 {
		panic("no return value specified for UseGrantedFees")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.AccAddress, types.Coins, []proto.Message) error); ok {
		r0 = rf(ctx, granter, grantee, fee, msgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFeeGrantKeeper creates a new instance of FeeGrantKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeGrantKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *FeeGrantKeeper {
	mock := &FeeGrantKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
